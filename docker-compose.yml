services:
  next-app:
    container_name: contabilidad-dashboard-dev
    image: contabilidad-dashboard-dev
    build:
      context: ./ContabilidadApp
      dockerfile: dev.Dockerfile
    environment:
      - CLIENT_SIDE_DEV_API_URL=http://localhost:3001
      - WATCHPACK_POLLING=true
    volumes:
      # Mount all necessary directories
      - ./ContabilidadApp/pages:/app/pages
      - ./ContabilidadApp/public:/app/public
      - ./ContabilidadApp/store:/app/store
      - ./ContabilidadApp/styles:/app/styles
      - ./ContabilidadApp/components:/app/components
      - ./ContabilidadApp/src:/app/src
      - ./ContabilidadApp/utils:/app/utils
      - ./ContabilidadApp/tsconfig.json:/app/tsconfig.json
      - ./ContabilidadApp/next.config.js:/app/next.config.js
      - ./ContabilidadApp/package.json:/app/package.json
    restart: always
    ports:
      - 3000:3000
    depends_on:
      - node-app
    networks:
      - my_network

  node-app:
    container_name: contabilidad-api-dev
    image: contabilidad-api-dev
    build:
      context: ./ApiContabilidad
      dockerfile: dev.Dockerfile
    environment:
      DBHOST: 'sqlserver'
      DBPASS: 'hola1234!'
      DBUSER: 'sa'
      DBNAME: 'contabilidad_api'
      URL_REDIRECT: 'http://localhost:3001/v1/redirect'
      URL_REDIRECT_OUT: 'http://localhost:3000/auth'
    volumes:
      - ./ApiContabilidad/src:/app/src
      - ./ApiContabilidad/package.json:/app/package.json
      - ./ApiContabilidad/tsconfig.json:/app/tsconfig.json
    restart: always
    ports:
      - 3001:3001
    depends_on:
      database:
        condition: service_healthy
    networks:
      - my_network

  database:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: sqlserver
    ports:
      - 1433:1433
    environment:
      ACCEPT_EULA: "Y"
      MSSQL_SA_PASSWORD: "hola1234!"
      MSSQL_PID: "Express"
    volumes:
      - sqlserver-data:/var/opt/mssql
      - ./sql_scripts:/sql_scripts
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P 'hola1234!' -C -Q 'SELECT 1' || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 15
      start_period: 30s
    networks:
      my_network:
        aliases:
          - sqlserver

  # Database initialization service
  db-init:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: db-init
    depends_on:
      database:
        condition: service_healthy
    command: >
      bash -c "
        # Wait for SQL Server to be ready
        echo 'Waiting for SQL Server to be ready...'
        sleep 30
        
        # Test connection first
        until /opt/mssql-tools18/bin/sqlcmd -S sqlserver -U sa -P 'hola1234!' -C -Q 'SELECT 1' > /dev/null 2>&1; do
          echo 'Waiting for SQL Server...'
          sleep 5
        done
        
        echo 'SQL Server is ready, creating database...'
        # Create database if it doesn't exist
        /opt/mssql-tools18/bin/sqlcmd -S sqlserver -U sa -P 'hola1234!' -C -Q \"
          IF NOT EXISTS (SELECT * FROM sys.databases WHERE name = 'contabilidad_api')
          BEGIN
            CREATE DATABASE contabilidad_api;
            PRINT 'Database contabilidad_api created successfully';
          END
          ELSE
          BEGIN
            PRINT 'Database contabilidad_api already exists';
          END
        \"
        
        if [ \$? -eq 0 ]; then
          echo 'Database initialization completed successfully'
        else
          echo 'Database initialization failed'
          exit 1
        fi
      "
    networks:
      - my_network
    restart: "no"

volumes:
  sqlserver-data:

networks:
  my_network:
    name: my_network_net
    driver: bridge
    ipam:
      driver: default